Microsoft (R) Macro Assembler Version 14.16.27026.1	    03/17/19 21:31:33
Assignment 3 - Question 				     Page 1 - 1


				; Members:
				; ---------
				; Affan Haq (104808247)
				; Ahmad Ouerfelli (104804669)
				; Cezar Begu (104808191)
				; Zito Namuro (104828980)

				TITLE Assignment 3 - Question 1

				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C ; Last update: 7/29/05
			      C 
			      C ;----------------------------------------
			      C ; Procedure Prototypes
			      C ;----------------------------------------
			      C CloseFile PROTO		; close a file handle
			      C Clrscr PROTO		; clear the screen
			      C CreateOutputFile PROTO		; create file for writing
			      C Crlf PROTO		; output carriage-return / linefeed
			      C Delay PROTO		; delay for n milliseconds
			      C DumpMem PROTO		; display memory dump
			      C DumpRegs PROTO		; display register dump
			      C GetCommandTail PROTO		; get command-line string
			      C GetDateTime PROTO,		; get system date and time
			      C   startTime:PTR QWORD
			      C GetMaxXY PROTO		; get console rows and columns
			      C GetMseconds PROTO		; get milliseconds past midnight
			      C GetTextColor PROTO		; Get the console window's color attributes. 
			      C Gotoxy PROTO		; set the cursor position
			      C IsDigit PROTO		; return ZF=1 if AL is a decimal digit
			      C MsgBox PROTO		; display popup message box
			      C MsgBoxAsk PROTO		; display popup yes/no question box
			      C OpenInputFile PROTO		; open file in input mode
			      C ParseDecimal32 PROTO		; convert unsigned decimal string to 32-bit binary
			      C ParseInteger32 PROTO		; convert signed decimal string to 32-bit binary
			      C Randomize PROTO		; reseed random number generator
			      C RandomRange PROTO		; generate random integer in specified range
			      C Random32 PROTO		; generate 32-bit random integer
			      C ReadInt PROTO		; read signed decimal integer from console
			      C ReadChar PROTO		; reach single character from console
			      C ReadDec PROTO		; read unsigned decimal integer from console
			      C ReadFloat PROTO		; read floating-point value from keyboard
			      C ReadFromFile PROTO   		; read buffer from input file
			      C ReadHex PROTO		; read hexadecimal integer from console
			      C ReadKey PROTO		; Reads keyboard input if available (4/6/03)
			      C ReadKeyFlush PROTO		; Flush ReadKey buffer and repeat counter (4/6/03)
			      C ReadString PROTO		; read string from console
			      C SetTextColor PROTO		; set console text color
			      C ShowFPUStack PROTO		; write floating-point stack to console window
			      C StrLength PROTO		; returns the length of a string
			      C WaitMsg PROTO		; display wait message, wait for Enter key
			      C WriteBin PROTO		; write integer to output in binary format
			      C WriteBinB PROTO		; write binary integer in byte, word,or doubleword format
			      C WriteChar PROTO		; write single character to output
			      C WriteDec PROTO		; write unsigned decimal integer to output
			      C WriteFloat PROTO		; write ST(0) to console in floating-point format
			      C WriteHex PROTO		; write hexadecimal integer to output
			      C WriteHexB PROTO		; write hexadecimal integer in word or doubleword format
			      C WriteInt PROTO		; write signed integer to output
			      C ;WriteStackFrame		; write stack frame data (James Brink--see proto later in this file)
			      C ;WriteStackFrameName		; write stack frame data with proc name (James Brink)
			      C WriteString PROTO		; write null-terminated string to output
			      C WriteToFile PROTO		; write a buffer to an output file
			      C WriteWindowsMsg PROTO		; write last error message generated by MS-Windows
			      C 
			      C 
			      C ; Copy a source string to a target string.
			      C Str_copy PROTO,
			      C  	source:PTR BYTE,
			      C  	target:PTR BYTE
			      C 
			      C ; Return the length of a null-terminated string..
			      C Str_length PROTO,
			      C 	pString:PTR BYTE
			      C 
			      C ; Compare string1 to string2. Set the Zero and
			      C ; Carry flags in the same way as the CMP instruction.
			      C Str_compare PROTO,
			      C 	string1:PTR BYTE,
			      C 	string2:PTR BYTE
			      C 
			      C ; Trim a given trailing character from a string.
			      C ; The second argument is the character to trim.
			      C Str_trim PROTO,
			      C 	pString:PTR BYTE,
			      C 	char:BYTE
			      C 
			      C ; Convert a null-terminated string to upper case.
			      C Str_ucase PROTO,
			      C 	pString:PTR BYTE
			      C 
			      C ;******** Procedures by James Brink ********************************
			      C ; Used by permission.
			      C 
			      C WriteStackFrameName PROTO,
			      C            numParam:DWORD,     ; number of parameters passed to the procedure
			      C            numLocalVal: DWORD, ; number of DWordLocal variables
			      C            numSavedReg: DWORD, ; number of saved registers
			      C            procName: PTR BYTE
			      C 
			      C WriteStackFrame PROTO,
			      C            numParam:DWORD,     ; number of parameters passed to the procedure
			      C            numLocalVal: DWORD, ; number of DWordLocal variables
			      C            numSavedReg: DWORD  ; number of saved registers
			      C 
			      C 
			      C ;-----------------------------------
			      C ; Standard 4-bit color definitions
			      C ;-----------------------------------
 = 00000000		      C black        = 0000b
 = 00000001		      C blue         = 0001b
 = 00000002		      C green        = 0010b
 = 00000003		      C cyan         = 0011b
 = 00000004		      C red          = 0100b
 = 00000005		      C magenta      = 0101b
 = 00000006		      C brown        = 0110b
 = 00000007		      C lightGray    = 0111b
 = 00000008		      C gray         = 1000b
 = 00000009		      C lightBlue    = 1001b
 = 0000000A		      C lightGreen   = 1010b
 = 0000000B		      C lightCyan    = 1011b
 = 0000000C		      C lightRed     = 1100b
 = 0000000D		      C lightMagenta = 1101b
 = 0000000E		      C yellow       = 1110b
 = 0000000F		      C white        = 1111b
			      C 
			      C ; This structure is returned by the FSTSW
			      C ; instruction in protected mode:
			      C 
 0000001C		      C FPU_ENVIRON STRUCT
 00000000  0000		      C 	controlWord    WORD ?
			      C 	ALIGN DWORD
 00000004  0000		      C 	statusWord     WORD ?
			      C 	ALIGN DWORD
 00000008  0000		      C 	tagWord        WORD ?
			      C 	ALIGN DWORD
 0000000C  00000000	      C 	instrPointerOffset     DWORD ?
 00000010  00000000	      C 	instrPointerSelector   DWORD ?
 00000014  00000000	      C 	operandPointerOffset   DWORD ?
 00000018  0000		      C 	operandPointerSelector WORD ?
 0000001A  0000		      C 	WORD ?	; not used
			      C FPU_ENVIRON ENDS
			      C 
			      C .LIST
			      C 

 00000000			.data	
 00000000 57 68 61 74 20		message1 BYTE "What do you want to do now? > ", 0
	   64 6F 20 79 6F
	   75 20 77 61 6E
	   74 20 74 6F 20
	   64 6F 20 6E 6F
	   77 3F 20 3E 20
	   00
 0000001F 57 68 61 74 20		message2 BYTE "What is the size N of Vector? > ", 0
	   69 73 20 74 68
	   65 20 73 69 7A
	   65 20 4E 20 6F
	   66 20 56 65 63
	   74 6F 72 3F 20
	   3E 20 00
 00000040 57 68 61 74 20		message3_1 BYTE "What are the ", 0
	   61 72 65 20 74
	   68 65 20 00
 0000004E 20 76 61 6C 75		message3_2 BYTE " values in Vector? > ", 0
	   65 73 20 69 6E
	   20 56 65 63 74
	   6F 72 3F 20 3E
	   20 00
 00000064 53 69 7A 65 20		message4 BYTE "Size of Vector is N = ", 0
	   6F 66 20 56 65
	   63 74 6F 72 20
	   69 73 20 4E 20
	   3D 20 00
 0000007B 56 65 63 74 6F		message5 BYTE "Vector = ", 0
	   72 20 3D 20 00
 00000085 53 74 61 63 6B		message6 BYTE "Stack not empty", 0
	   20 6E 6F 74 20
	   65 6D 70 74 79
	   00
 00000095 53 74 61 63 6B		message7 BYTE "Stack is empty", 0
	   20 69 73 20 65
	   6D 70 74 79 00
 000000A4 56 65 63 74 6F		message8 BYTE "Vector is ", 0
	   72 20 69 73 20
	   00
 000000AF 53 74 61 63 6B		message9 BYTE "Stack is ", 0
	   20 69 73 20 00
 000000B9 62 65 66 6F 72		message10 BYTE "before ArrayToStack", 0
	   65 20 41 72 72
	   61 79 54 6F 53
	   74 61 63 6B 00
 000000CD 61 66 74 65 72		message11 BYTE "after ArrayToStack", 0
	   20 41 72 72 61
	   79 54 6F 53 74
	   61 63 6B 00
 000000E0 49 20 61 6D 20		message12 BYTE "I am exiting... Thank you Honey... and Get lost...", 0
	   65 78 69 74 69
	   6E 67 2E 2E 2E
	   20 54 68 61 6E
	   6B 20 79 6F 75
	   20 48 6F 6E 65
	   79 2E 2E 2E 20
	   61 6E 64 20 47
	   65 74 20 6C 6F
	   73 74 2E 2E 2E
	   00
 00000113 57 68 61 74 20		message13 BYTE "What do you want to do now? > ", 0
	   64 6F 20 79 6F
	   75 20 77 61 6E
	   74 20 74 6F 20
	   64 6F 20 6E 6F
	   77 3F 20 3E 20
	   00
 00000132 41 6C 72 65 61		errorMessage1 BYTE "Already loaded", 0
	   64 79 20 6C 6F
	   61 64 65 64 00
 00000141 45 6D 70 74 79		errorMessage2 BYTE "Empty stack", 0
	   20 73 74 61 63
	   6B 00
 0000014D 4C 6F 61 64 20		errorMessage3 BYTE "Load vector first!", 0
	   76 65 63 74 6F
	   72 20 66 69 72
	   73 74 21 00
 00000160 4E 75 6D 62 65		errorMessage4 BYTE "Number must be bigger then 0!", 0 
	   72 20 6D 75 73
	   74 20 62 65 20
	   62 69 67 67 65
	   72 20 74 68 65
	   6E 20 30 21 00
 0000017E  00000064 [			vector DWORD 100 DUP(0)
	    00000000
	   ]
 0000030E 00000000			vectorSize DWORD 0
 00000312  00000064 [			stackToPrint DWORD LENGTHOF vector DUP(0)
	    00000000
	   ]
 000004A2 01				isStackEmptyBool BYTE 1
 000004A3 00				vactorHasValues BYTE 0
 000004A4 20 00				space BYTE " ", 0

 00000000			.code

 00000000			DoSpace PROC USES edx
 00000000  52		   *	    push   edx
 00000001  BA 000004A4 R		mov edx, OFFSET space
 00000006  E8 00000000 E		call WriteString
					; call Crlf
 0000000B			DoSpace ENDP
Ass3-1.asm(44) : warning A6001:no return from procedure
					
 0000000B			main proc
					
 0000000B				do_while:	
 0000000B  BA 00000113 R			MOV edx, OFFSET message13
 00000010  E8 00000000 E			CALL WriteString
 00000015  E8 00000000 E			CALL ReadInt
 0000001A  E8 00000000 E			CALL Crlf
 0000001F  83 F8 FF				CMP eax,  -1
 00000022  0F 84 0000017F			JE end_do

 00000028  83 F8 00				cmp eax, 0
 0000002B  75 05				JNE next_check
 0000002D  E8 0000018B				CALL Option0
 00000032					next_check:
 00000032  83 F8 01				cmp eax, 1
 00000035  0F 85 000000B9			JNE next_check1

					;Option 1 : loads array into stack + ui
 0000003B  80 3D 000004A3 R			CMP vactorHasValues, 0 
	   00
 00000042  0F 84 00000144			JE error3
 00000048  80 3D 000004A2 R			CMP isStackEmptyBool, 0 
	   00
 0000004F  0F 84 0000008B			JE error1

 00000055  E8 00000000 E			CALL Crlf
 0000005A  BA 000000A4 R			MOV edx, OFFSET message8
 0000005F  E8 00000000 E			CALL WriteString
 00000064  E8 00000246				CALL PrintVector
 00000069  BA 000000B9 R			MOV edx, OFFSET message10
 0000006E  E8 00000000 E			CALL WriteString
 00000073  E8 00000000 E			CALL Crlf

						;Logic
 00000078  E8 000002B1				CALL ArrayToStack
 0000007D  E8 000002FC				CALL CopyInverseToStackToPrint
 00000082  E8 00000284				CALL EmptyVector
						;End Logic

 00000087  BA 000000AF R			MOV edx, OFFSET message9
 0000008C  E8 00000000 E			CALL WriteString
 00000091  E8 00000247				CALL PrintStackToPrint
 00000096  BA 000000CD R			MOV edx, OFFSET message11
 0000009B  E8 00000000 E			CALL WriteString
 000000A0  E8 00000000 E			CALL Crlf

 000000A5  BA 000000A4 R			MOV edx, OFFSET message8
 000000AA  E8 00000000 E			CALL WriteString
 000000AF  E8 000001FB				CALL PrintVector
 000000B4  BA 000000CD R			MOV edx, OFFSET message11
 000000B9  E8 00000000 E			CALL WriteString
 000000BE  E8 00000000 E			CALL Crlf
 000000C3  C6 05 000004A2 R			MOV isStackEmptyBool, 0
	   00
 000000CA  E8 000001C0				CALL IsStackEmpty
 000000CF  E8 00000000 E			CALL Crlf
 000000D4  E8 00000000 E			CALL Crlf
 000000D9  E8 FFFFFF22				CALL DoSpace
 000000DE  EB 14				JMP end_if1

 000000E0					error1:
 000000E0  BA 00000132 R			MOV edx, OFFSET errorMessage1
 000000E5  E8 00000000 E			CALL WriteString
 000000EA  E8 00000000 E			CALL Crlf
 000000EF  E8 00000000 E			CALL Crlf

 000000F4					end_if1:
					;end option 1

 000000F4					next_check1:
 000000F4  83 F8 02				cmp eax, 2
 000000F7  0F 85 000000A5			JNE next_check2

					;Option 2 : loads stack into array + UI
 000000FD  80 3D 000004A3 R			CMP vactorHasValues, 0 
	   00
 00000104  0F 84 00000082			JE error3
 0000010A  80 3D 000004A2 R			CMP isStackEmptyBool, 1
	   01
 00000111  74 63				JE error2


 00000113  E8 00000000 E			CALL Crlf
 00000118  BA 000000AF R			MOV edx, OFFSET message9
 0000011D  E8 00000000 E			CALL WriteString
 00000122  E8 000001B6				CALL PrintStackToPrint
 00000127  BA 000000B9 R			MOV edx, OFFSET message10
 0000012C  E8 00000000 E			CALL WriteString
 00000131  E8 00000000 E			CALL Crlf

						;Logic
 00000136  E8 00000219				CALL StackToArray
 0000013B  E8 0000027F				CALL EmptyStackToPrint
						;End Logic

 00000140  BA 000000A4 R			MOV edx, OFFSET message8
 00000145  E8 00000000 E			CALL WriteString
 0000014A  E8 00000160				CALL PrintVector
 0000014F  BA 000000CD R			MOV edx, OFFSET message11
 00000154  E8 00000000 E			CALL WriteString
 00000159  E8 00000000 E			CALL Crlf

 0000015E  C6 05 000004A2 R			MOV isStackEmptyBool, 1
	   01
 00000165  E8 00000125				CALL IsStackEmpty
 0000016A  E8 00000000 E			CALL Crlf
 0000016F  E8 00000000 E			CALL Crlf
 00000174  EB 2C				JMP end_if2
					
 00000176					error2:
 00000176  BA 00000141 R			MOV edx, OFFSET errorMessage2
 0000017B  E8 00000000 E			CALL WriteString
 00000180  E8 00000000 E			CALL Crlf
 00000185  E8 00000000 E			CALL Crlf
 0000018A  EB 16				JMP end_if2
								
 0000018C					error3:
 0000018C  BA 0000014D R			MOV edx, OFFSET errorMessage3
 00000191  E8 00000000 E			CALL WriteString
 00000196  E8 00000000 E			CALL Crlf
 0000019B  E8 00000000 E			CALL Crlf
 000001A0  EB 00				JMP end_if2

 000001A2					end_if2:
					;End option 2

 000001A2					next_check2:

 000001A2  E9 FFFFFE64				JMP do_while
 000001A7				end_do:
 000001A7  BA 000000E0 R			MOV edx, OFFSET message12
 000001AC  E8 00000000 E			call WriteString
 000001B1  E8 00000000 E			call Crlf

					exit
 000001B6  6A 00	   *	    push   +000000000h
 000001B8  E8 00000000 E   *	    call   ExitProcess
 000001BD			main endp

				; promts user to enter the vector
 000001BD			Option0 PROC USES esi eax ebx ecx edx
 000001BD  56		   *	    push   esi
 000001BE  50		   *	    push   eax
 000001BF  53		   *	    push   ebx
 000001C0  51		   *	    push   ecx
 000001C1  52		   *	    push   edx
 000001C2  BA 0000001F R		MOV edx, OFFSET message2
 000001C7  E8 00000000 E		CALL WriteString

 000001CC  E8 00000000 E		CALL ReadInt
 000001D1  A3 0000030E R		MOV vectorSize, eax
 000001D6  83 3D 0000030E R		CMP vectorSize, 1
	   01
 000001DD  0F 8C 0000008D		JL errorOption1

 000001E3  BA 00000040 R		MOV edx, OFFSET message3_1
 000001E8  E8 00000000 E		CALL WriteString

 000001ED  E8 00000000 E		CALL WriteDec

 000001F2  BA 0000004E R		MOV edx, OFFSET message3_2
 000001F7  E8 00000000 E		CALL WriteString

					;Taking in the values for the vector
 000001FC  B9 00000000			MOV ecx, 0
 00000201  BB 00000000			MOV ebx, 0
 00000206				do_while_Read:	
 00000206  3B 1D 0000030E R			CMP ebx,  vectorSize
 0000020C  74 11				JE end_do_Read

 0000020E  E8 00000000 E			CALL ReadDec
 00000213  89 81 0000017E R			MOV [vector + ecx], eax

 00000219  83 C1 04				ADD ecx, TYPE vector
 0000021C  43					INC ebx
 0000021D  EB E7				JMP do_while_Read
 0000021F				end_do_Read:

 0000021F  E8 00000000 E		CALL Crlf
 00000224  BA 00000064 R		MOV edx, OFFSET message4
 00000229  E8 00000000 E		CALL WriteString
 0000022E  A1 0000030E R		MOV eax, vectorSize
 00000233  E8 00000000 E		CALL WriteDec
 00000238  E8 00000000 E		CALL Crlf

 0000023D  BA 0000007B R		MOV edx, OFFSET message5
 00000242  E8 00000000 E		CALL WriteString
 00000247  E8 00000063			CALL PrintVector
 0000024C  E8 00000000 E		CALL Crlf

 00000251  E8 00000039			CALL IsStackEmpty
 00000256  E8 00000000 E		CALL Crlf
 0000025B  E8 00000000 E		CALL Crlf
 00000260  C6 05 000004A2 R		MOV isStackEmptyBool, 1
	   01
 00000267  C6 05 000004A3 R		MOV vactorHasValues, 1
	   01
 0000026E  EB 19			JMP end_option1

 00000270				errorOption1:
 00000270  E8 00000000 E		CALL Crlf
 00000275  BA 00000160 R		MOV edx, OFFSET errorMessage4
 0000027A  E8 00000000 E		CALL WriteString
 0000027F  E8 00000000 E		CALL Crlf
 00000284  E8 00000000 E		CALL Crlf

 00000289				end_option1:
					RET
 00000289  5A		   *	    pop    edx
 0000028A  59		   *	    pop    ecx
 0000028B  5B		   *	    pop    ebx
 0000028C  58		   *	    pop    eax
 0000028D  5E		   *	    pop    esi
 0000028E  C3		   *	    ret    00000h
 0000028F			Option0 ENDP

				; displays if the stack is empty or not
 0000028F			IsStackEmpty PROC 
 0000028F  80 3D 000004A2 R		CMP isStackEmptyBool, 1
	   01
 00000296  74 0C			JE is_empty
 00000298  BA 00000085 R		MOV edx, OFFSET message6
 0000029D  E8 00000000 E		CALL WriteString
 000002A2  EB 0A			JMP end_if_empty
 000002A4				is_empty:
 000002A4  BA 00000095 R		MOV edx, OFFSET message7
 000002A9  E8 00000000 E		CALL WriteString
 000002AE				end_if_empty:
 000002AE  C3				RET
 000002AF			IsStackEmpty ENDP

				;prints the vector
 000002AF			PrintVector PROC 
 000002AF  B9 00000000			MOV ecx, 0
 000002B4  BB 00000000			MOV ebx, 0
 000002B9				do_while_Print:	
 000002B9  3B 1D 0000030E R			CMP ebx,  vectorSize
 000002BF  74 1B				JE end_do_Print

 000002C1  8B 81 0000017E R			MOV eax, [vector + ecx]
 000002C7  E8 00000000 E			CALL WriteDec
 000002CC  B8 00000020				MOV eax, ' '
 000002D1  E8 00000000 E			CALL WriteChar

 000002D6  83 C1 04				ADD ecx, TYPE vector
 000002D9  43					INC ebx
 000002DA  EB DD				JMP do_while_Print
 000002DC				end_do_Print:
 000002DC  C3				RET
 000002DD			PrintVector ENDP

				; prints the emulated stack (only used for siplay and not storage)
 000002DD			PrintStackToPrint PROC 
 000002DD  B9 00000000			MOV ecx, 0
 000002E2  BB 00000000			MOV ebx, 0
 000002E7				do_while_Print:	
 000002E7  3B 1D 0000030E R			CMP ebx,  vectorSize
 000002ED  74 1B				JE end_do_Print

 000002EF  8B 81 00000312 R			MOV eax, [stackToPrint + ecx]
 000002F5  E8 00000000 E			CALL WriteDec
 000002FA  B8 00000020				MOV eax, ' '
 000002FF  E8 00000000 E			CALL WriteChar

 00000304  83 C1 04				ADD ecx, TYPE vector
 00000307  43					INC ebx
 00000308  EB DD				JMP do_while_Print
 0000030A				end_do_Print:
 0000030A  C3				RET
 0000030B			PrintStackToPrint ENDP

				;replaces all values with 0
 0000030B			EmptyVector PROC
 0000030B  B9 00000000			MOV ecx, 0
 00000310  BB 00000000			MOV ebx, 0
 00000315				do_while_Empty:	
 00000315  3B 1D 0000030E R			CMP ebx, vectorSize
 0000031B  74 10				JE end_do_Empty

 0000031D  C7 81 0000017E R			MOV [vector + ecx], 0
	   00000000

 00000327  83 C1 04				ADD ecx, TYPE vector
 0000032A  43					INC ebx
 0000032B  EB E8				JMP do_while_Empty
 0000032D				end_do_Empty:
 0000032D  C3				RET
 0000032E			EmptyVector ENDP

				; movest the array values to a stack
 0000032E			ArrayToStack PROC
 0000032E  5A				POP edx
 0000032F  B9 00000000			MOV ecx, 0
 00000334  BF 00000000			MOV edi, 0
 00000339  8B 1D 0000030E R		MOV EBX,vectorSize
 0000033F  BE 0000017E R		MOV ESI, OFFSET vector

 00000344				do_while_PUSH:	
 00000344  3B FB				CMP edi, EBX
 00000346  74 0A				JE end_do_PUSH

 00000348  8B 04 0E				MOV eax, [ESI + ecx]
 0000034B  50					PUSH eax

 0000034C  83 C1 04				ADD ecx, TYPE vector
 0000034F  47					INC edi
 00000350  EB F2				JMP do_while_PUSH
 00000352				end_do_PUSH:
 00000352  52				PUSH edx
 00000353  C3				RET
 00000354			ArrayToStack ENDP

				;moves the stack values to a array
 00000354			StackToArray proc
 00000354  5F				POP	edi
 00000355  8B 1D 0000030E R		MOV EBX, vectorSize
 0000035B  8B C3			MOV eax, EBX 
 0000035D  BA 00000004			MOV edx, TYPE vector
 00000362  F7 E2			MUL edx
 00000364  83 E8 04			SUB eax, TYPE vector
 00000367  59				POP ecx 
 00000368  59				POP ecx
 00000369  BE 0000017E R		MOV ESI, OFFSET vector
 0000036E				do_while_POP:	
 0000036E  59					POP ecx
 0000036F  89 0C 06				MOV [ESI + eax], ecx

 00000372  83 F8 00				CMP eax, 0
 00000375  74 05				JE end_do_POP

 00000377  83 E8 04				SUB eax, TYPE vector
 0000037A  EB F2				JMP do_while_POP
 0000037C				end_do_POP:
 0000037C  57				PUSH edi
 0000037D  C3				RET
 0000037E			StackToArray ENDP

				;used to reverse the fake stack so that it can emulate the real one
 0000037E			CopyInverseToStackToPrint proc
 0000037E  5B				POP ebx

 0000037F  B9 00000000			MOV ecx, 0
 00000384  BA 00000000			MOV edx, 0
 00000389				do_while_PUSH:	
 00000389  3B 15 0000030E R			CMP edx, vectorSize
 0000038F  74 0D				JE end_do_PUSH

 00000391  8B 81 0000017E R			MOV eax, [vector + ecx]
 00000397  50					PUSH eax

 00000398  83 C1 04				ADD ecx, TYPE vector
 0000039B  42					INC edx
 0000039C  EB EB				JMP do_while_PUSH
 0000039E				end_do_PUSH:

 0000039E  B9 00000000			MOV ecx, 0
 000003A3  BA 00000000			MOV edx, 0
 000003A8				do_while_POP:	
 000003A8  3B 15 0000030E R			CMP edx, vectorSize
 000003AE  74 0D				JE end_do_POP
						
 000003B0  58					POP eax
 000003B1  89 81 00000312 R			MOV [stackToPrint + ecx], eax
						
 000003B7  83 C1 04				ADD ecx, TYPE vector
 000003BA  42					INC edx
 000003BB  EB EB				JMP do_while_POP
 000003BD				end_do_POP:
 000003BD  53				PUSH ebx
 000003BE  C3				RET
 000003BF			CopyInverseToStackToPrint ENDP

				;emptis the fake stack
 000003BF			EmptyStackToPrint PROC
 000003BF  B9 00000000			MOV ecx, 0
 000003C4  BB 00000000			MOV ebx, 0
 000003C9				do_while_Empty:	
 000003C9  3B 1D 0000030E R			CMP ebx, vectorSize
 000003CF  74 10				JE end_do_Empty

 000003D1  C7 81 00000312 R			MOV [stackToPrint + ecx], 0
	   00000000

 000003DB  83 C1 04				ADD ecx, TYPE vector
 000003DE  43					INC ebx
 000003DF  EB E8				JMP do_while_Empty
 000003E1				end_do_Empty:
 000003E1  C3				RET
 000003E2			EmptyStackToPrint ENDP

				end main
Microsoft (R) Macro Assembler Version 14.16.27026.1	    03/17/19 21:31:33
Assignment 3 - Question 				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004A6 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003E2 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ArrayToStack . . . . . . . . . .	P Near	 0000032E _TEXT	Length= 00000026 Public STDCALL
  do_while_PUSH  . . . . . . . .	L Near	 00000344 _TEXT	
  end_do_PUSH  . . . . . . . . .	L Near	 00000352 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CopyInverseToStackToPrint  . . .	P Near	 0000037E _TEXT	Length= 00000041 Public STDCALL
  do_while_PUSH  . . . . . . . .	L Near	 00000389 _TEXT	
  end_do_PUSH  . . . . . . . . .	L Near	 0000039E _TEXT	
  do_while_POP . . . . . . . . .	L Near	 000003A8 _TEXT	
  end_do_POP . . . . . . . . . .	L Near	 000003BD _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DoSpace  . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000000B Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EmptyStackToPrint  . . . . . . .	P Near	 000003BF _TEXT	Length= 00000023 Public STDCALL
  do_while_Empty . . . . . . . .	L Near	 000003C9 _TEXT	
  end_do_Empty . . . . . . . . .	L Near	 000003E1 _TEXT	
EmptyVector  . . . . . . . . . .	P Near	 0000030B _TEXT	Length= 00000023 Public STDCALL
  do_while_Empty . . . . . . . .	L Near	 00000315 _TEXT	
  end_do_Empty . . . . . . . . .	L Near	 0000032D _TEXT	
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsStackEmpty . . . . . . . . . .	P Near	 0000028F _TEXT	Length= 00000020 Public STDCALL
  is_empty . . . . . . . . . . .	L Near	 000002A4 _TEXT	
  end_if_empty . . . . . . . . .	L Near	 000002AE _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Option0  . . . . . . . . . . . .	P Near	 000001BD _TEXT	Length= 000000D2 Public STDCALL
  do_while_Read  . . . . . . . .	L Near	 00000206 _TEXT	
  end_do_Read  . . . . . . . . .	L Near	 0000021F _TEXT	
  errorOption1 . . . . . . . . .	L Near	 00000270 _TEXT	
  end_option1  . . . . . . . . .	L Near	 00000289 _TEXT	
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintStackToPrint  . . . . . . .	P Near	 000002DD _TEXT	Length= 0000002E Public STDCALL
  do_while_Print . . . . . . . .	L Near	 000002E7 _TEXT	
  end_do_Print . . . . . . . . .	L Near	 0000030A _TEXT	
PrintVector  . . . . . . . . . .	P Near	 000002AF _TEXT	Length= 0000002E Public STDCALL
  do_while_Print . . . . . . . .	L Near	 000002B9 _TEXT	
  end_do_Print . . . . . . . . .	L Near	 000002DC _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StackToArray . . . . . . . . . .	P Near	 00000354 _TEXT	Length= 0000002A Public STDCALL
  do_while_POP . . . . . . . . .	L Near	 0000036E _TEXT	
  end_do_POP . . . . . . . . . .	L Near	 0000037C _TEXT	
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 0000000B _TEXT	Length= 000001B2 Public STDCALL
  do_while . . . . . . . . . . .	L Near	 0000000B _TEXT	
  next_check . . . . . . . . . .	L Near	 00000032 _TEXT	
  error1 . . . . . . . . . . . .	L Near	 000000E0 _TEXT	
  end_if1  . . . . . . . . . . .	L Near	 000000F4 _TEXT	
  next_check1  . . . . . . . . .	L Near	 000000F4 _TEXT	
  error2 . . . . . . . . . . . .	L Near	 00000176 _TEXT	
  error3 . . . . . . . . . . . .	L Near	 0000018C _TEXT	
  end_if2  . . . . . . . . . . .	L Near	 000001A2 _TEXT	
  next_check2  . . . . . . . . .	L Near	 000001A2 _TEXT	
  end_do . . . . . . . . . . . .	L Near	 000001A7 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorMessage1  . . . . . . . . .	Byte	 00000132 _DATA	
errorMessage2  . . . . . . . . .	Byte	 00000141 _DATA	
errorMessage3  . . . . . . . . .	Byte	 0000014D _DATA	
errorMessage4  . . . . . . . . .	Byte	 00000160 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
isStackEmptyBool . . . . . . . .	Byte	 000004A2 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
message10  . . . . . . . . . . .	Byte	 000000B9 _DATA	
message11  . . . . . . . . . . .	Byte	 000000CD _DATA	
message12  . . . . . . . . . . .	Byte	 000000E0 _DATA	
message13  . . . . . . . . . . .	Byte	 00000113 _DATA	
message1 . . . . . . . . . . . .	Byte	 00000000 _DATA	
message2 . . . . . . . . . . . .	Byte	 0000001F _DATA	
message3_1 . . . . . . . . . . .	Byte	 00000040 _DATA	
message3_2 . . . . . . . . . . .	Byte	 0000004E _DATA	
message4 . . . . . . . . . . . .	Byte	 00000064 _DATA	
message5 . . . . . . . . . . . .	Byte	 0000007B _DATA	
message6 . . . . . . . . . . . .	Byte	 00000085 _DATA	
message7 . . . . . . . . . . . .	Byte	 00000095 _DATA	
message8 . . . . . . . . . . . .	Byte	 000000A4 _DATA	
message9 . . . . . . . . . . . .	Byte	 000000AF _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space  . . . . . . . . . . . . .	Byte	 000004A4 _DATA	
stackToPrint . . . . . . . . . .	DWord	 00000312 _DATA	
vactorHasValues  . . . . . . . .	Byte	 000004A3 _DATA	
vectorSize . . . . . . . . . . .	DWord	 0000030E _DATA	
vector . . . . . . . . . . . . .	DWord	 0000017E _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
