Microsoft (R) Macro Assembler Version 14.16.27026.1	    03/16/19 23:11:12
Ass3-1.asm						     Page 1 - 1


				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C ; Last update: 7/29/05
			      C 
			      C ;----------------------------------------
			      C ; Procedure Prototypes
			      C ;----------------------------------------
			      C CloseFile PROTO		; close a file handle
			      C Clrscr PROTO		; clear the screen
			      C CreateOutputFile PROTO		; create file for writing
			      C Crlf PROTO		; output carriage-return / linefeed
			      C Delay PROTO		; delay for n milliseconds
			      C DumpMem PROTO		; display memory dump
			      C DumpRegs PROTO		; display register dump
			      C GetCommandTail PROTO		; get command-line string
			      C GetDateTime PROTO,		; get system date and time
			      C   startTime:PTR QWORD
			      C GetMaxXY PROTO		; get console rows and columns
			      C GetMseconds PROTO		; get milliseconds past midnight
			      C GetTextColor PROTO		; Get the console window's color attributes. 
			      C Gotoxy PROTO		; set the cursor position
			      C IsDigit PROTO		; return ZF=1 if AL is a decimal digit
			      C MsgBox PROTO		; display popup message box
			      C MsgBoxAsk PROTO		; display popup yes/no question box
			      C OpenInputFile PROTO		; open file in input mode
			      C ParseDecimal32 PROTO		; convert unsigned decimal string to 32-bit binary
			      C ParseInteger32 PROTO		; convert signed decimal string to 32-bit binary
			      C Randomize PROTO		; reseed random number generator
			      C RandomRange PROTO		; generate random integer in specified range
			      C Random32 PROTO		; generate 32-bit random integer
			      C ReadInt PROTO		; read signed decimal integer from console
			      C ReadChar PROTO		; reach single character from console
			      C ReadDec PROTO		; read unsigned decimal integer from console
			      C ReadFloat PROTO		; read floating-point value from keyboard
			      C ReadFromFile PROTO   		; read buffer from input file
			      C ReadHex PROTO		; read hexadecimal integer from console
			      C ReadKey PROTO		; Reads keyboard input if available (4/6/03)
			      C ReadKeyFlush PROTO		; Flush ReadKey buffer and repeat counter (4/6/03)
			      C ReadString PROTO		; read string from console
			      C SetTextColor PROTO		; set console text color
			      C ShowFPUStack PROTO		; write floating-point stack to console window
			      C StrLength PROTO		; returns the length of a string
			      C WaitMsg PROTO		; display wait message, wait for Enter key
			      C WriteBin PROTO		; write integer to output in binary format
			      C WriteBinB PROTO		; write binary integer in byte, word,or doubleword format
			      C WriteChar PROTO		; write single character to output
			      C WriteDec PROTO		; write unsigned decimal integer to output
			      C WriteFloat PROTO		; write ST(0) to console in floating-point format
			      C WriteHex PROTO		; write hexadecimal integer to output
			      C WriteHexB PROTO		; write hexadecimal integer in word or doubleword format
			      C WriteInt PROTO		; write signed integer to output
			      C ;WriteStackFrame		; write stack frame data (James Brink--see proto later in this file)
			      C ;WriteStackFrameName		; write stack frame data with proc name (James Brink)
			      C WriteString PROTO		; write null-terminated string to output
			      C WriteToFile PROTO		; write a buffer to an output file
			      C WriteWindowsMsg PROTO		; write last error message generated by MS-Windows
			      C 
			      C 
			      C ; Copy a source string to a target string.
			      C Str_copy PROTO,
			      C  	source:PTR BYTE,
			      C  	target:PTR BYTE
			      C 
			      C ; Return the length of a null-terminated string..
			      C Str_length PROTO,
			      C 	pString:PTR BYTE
			      C 
			      C ; Compare string1 to string2. Set the Zero and
			      C ; Carry flags in the same way as the CMP instruction.
			      C Str_compare PROTO,
			      C 	string1:PTR BYTE,
			      C 	string2:PTR BYTE
			      C 
			      C ; Trim a given trailing character from a string.
			      C ; The second argument is the character to trim.
			      C Str_trim PROTO,
			      C 	pString:PTR BYTE,
			      C 	char:BYTE
			      C 
			      C ; Convert a null-terminated string to upper case.
			      C Str_ucase PROTO,
			      C 	pString:PTR BYTE
			      C 
			      C ;******** Procedures by James Brink ********************************
			      C ; Used by permission.
			      C 
			      C WriteStackFrameName PROTO,
			      C            numParam:DWORD,     ; number of parameters passed to the procedure
			      C            numLocalVal: DWORD, ; number of DWordLocal variables
			      C            numSavedReg: DWORD, ; number of saved registers
			      C            procName: PTR BYTE
			      C 
			      C WriteStackFrame PROTO,
			      C            numParam:DWORD,     ; number of parameters passed to the procedure
			      C            numLocalVal: DWORD, ; number of DWordLocal variables
			      C            numSavedReg: DWORD  ; number of saved registers
			      C 
			      C 
			      C ;-----------------------------------
			      C ; Standard 4-bit color definitions
			      C ;-----------------------------------
 = 00000000		      C black        = 0000b
 = 00000001		      C blue         = 0001b
 = 00000002		      C green        = 0010b
 = 00000003		      C cyan         = 0011b
 = 00000004		      C red          = 0100b
 = 00000005		      C magenta      = 0101b
 = 00000006		      C brown        = 0110b
 = 00000007		      C lightGray    = 0111b
 = 00000008		      C gray         = 1000b
 = 00000009		      C lightBlue    = 1001b
 = 0000000A		      C lightGreen   = 1010b
 = 0000000B		      C lightCyan    = 1011b
 = 0000000C		      C lightRed     = 1100b
 = 0000000D		      C lightMagenta = 1101b
 = 0000000E		      C yellow       = 1110b
 = 0000000F		      C white        = 1111b
			      C 
			      C ; This structure is returned by the FSTSW
			      C ; instruction in protected mode:
			      C 
 0000001C		      C FPU_ENVIRON STRUCT
 00000000  0000		      C 	controlWord    WORD ?
			      C 	ALIGN DWORD
 00000004  0000		      C 	statusWord     WORD ?
			      C 	ALIGN DWORD
 00000008  0000		      C 	tagWord        WORD ?
			      C 	ALIGN DWORD
 0000000C  00000000	      C 	instrPointerOffset     DWORD ?
 00000010  00000000	      C 	instrPointerSelector   DWORD ?
 00000014  00000000	      C 	operandPointerOffset   DWORD ?
 00000018  0000		      C 	operandPointerSelector WORD ?
 0000001A  0000		      C 	WORD ?	; not used
			      C FPU_ENVIRON ENDS
			      C 
			      C .LIST
			      C 

 00000000			.data	
 00000000 57 68 61 74 20		message1 BYTE "What do you want to do now? > ", 0
	   64 6F 20 79 6F
	   75 20 77 61 6E
	   74 20 74 6F 20
	   64 6F 20 6E 6F
	   77 3F 20 3E 20
	   00
 0000001F 57 68 61 74 20		message2 BYTE "What is the size N of Vector? > ", 0
	   69 73 20 74 68
	   65 20 73 69 7A
	   65 20 4E 20 6F
	   66 20 56 65 63
	   74 6F 72 3F 20
	   3E 20 00
 00000040 57 68 61 74 20		message3_1 BYTE "What are the ", 0
	   61 72 65 20 74
	   68 65 20 00
 0000004E 20 76 61 6C 75		message3_2 BYTE " values in Vector? > ", 0
	   65 73 20 69 6E
	   20 56 65 63 74
	   6F 72 3F 20 3E
	   20 00
 00000064 53 69 7A 65 20		message4 BYTE "Size of Vector is N = ", 0
	   6F 66 20 56 65
	   63 74 6F 72 20
	   69 73 20 4E 20
	   3D 20 00
 0000007B 56 65 63 74 6F		message5 BYTE "Vector = ", 0
	   72 20 3D 20 00
 00000085 53 74 61 63 6B		message6 BYTE "Stack not empty", 0
	   20 6E 6F 74 20
	   65 6D 70 74 79
	   00
 00000095 53 74 61 63 6B		message7 BYTE "Stack is empty", 0
	   20 69 73 20 65
	   6D 70 74 79 00
 000000A4 56 65 63 74 6F		message8 BYTE "Vector is ", 0
	   72 20 69 73 20
	   00
 000000AF 53 74 61 63 6B		message9 BYTE "Stack is ", 0
	   20 69 73 20 00
 000000B9 62 65 66 6F 72		message10 BYTE "before ArrayToStack", 0
	   65 20 41 72 72
	   61 79 54 6F 53
	   74 61 63 6B 00
 000000CD 61 66 74 65 72		message11 BYTE "after ArrayToStack", 0
	   20 41 72 72 61
	   79 54 6F 53 74
	   61 63 6B 00
 000000E0 49 20 61 6D 20		message12 BYTE "I am exiting… Thank you Honey… and Get lost…", 0
	   65 78 69 74 69
	   6E 67 85 20 54
	   68 61 6E 6B 20
	   79 6F 75 20 48
	   6F 6E 65 79 85
	   20 61 6E 64 20
	   47 65 74 20 6C
	   6F 73 74 85 00
 0000010D 57 68 61 74 20		message13 BYTE "What do you want to do now? > ", 0
	   64 6F 20 79 6F
	   75 20 77 61 6E
	   74 20 74 6F 20
	   64 6F 20 6E 6F
	   77 3F 20 3E 20
	   00
 0000012C 41 6C 72 65 61		errorMessage1 BYTE "Already loaded", 0
	   64 79 20 6C 6F
	   61 64 65 64 00
 0000013B 45 6D 70 74 79		errorMessage2 BYTE "Empty stack", 0
	   20 73 74 61 63
	   6B 00
 00000147  00000064 [			vector DWORD 100 DUP(0)
	    00000000
	   ]
 000002D7 00000000			vectorSize DWORD 0
 000002DB  00000064 [			stackToPrint DWORD LENGTHOF vector DUP(0)
	    00000000
	   ]
 0000046B 01				isStackEmptyBool BYTE 1
 0000046C 57 4F 52 4B 53		trace BYTE "WORKS", 0
	   00

 00000000			.code
					
 00000000			main proc
					
 00000000  BA 0000010D R		MOV edx, OFFSET message13
 00000005				do_while:	
 00000005  E8 00000000 E			CALL WriteString
 0000000A  E8 00000000 E			CALL ReadInt
 0000000F  E8 00000000 E			CALL Crlf
 00000014  83 F8 FF				CMP eax,  -1
 00000017  74 20				JE end_do

 00000019  83 F8 00				cmp eax, 0
 0000001C  75 05				JNE next_check
 0000001E  E8 0000001D				CALL Option0
 00000023					next_check:
 00000023  83 F8 01				cmp eax, 1
 00000026  75 05				JNE next_check1
 00000028  E8 000000B6				CALL Option1
 0000002D					next_check1:
 0000002D  83 F8 02				cmp eax, 2
 00000030  75 05				JNE next_check2
 00000032  E8 0000015B				CALL Option2
 00000037					next_check2:

 00000037  EB CC				JMP do_while
 00000039				end_do:

					exit
 00000039  6A 00	   *	    push   +000000000h
 0000003B  E8 00000000 E   *	    call   ExitProcess
 00000040			main endp

 00000040			Option0 PROC USES esi eax ebx ecx edx
 00000040  56		   *	    push   esi
 00000041  50		   *	    push   eax
 00000042  53		   *	    push   ebx
 00000043  51		   *	    push   ecx
 00000044  52		   *	    push   edx
 00000045  BA 0000001F R		MOV edx, OFFSET message2
 0000004A  E8 00000000 E		CALL WriteString

 0000004F  E8 00000000 E		CALL ReadDec
 00000054  A3 000002D7 R		MOV vectorSize, eax

 00000059  BA 00000040 R		MOV edx, OFFSET message3_1
 0000005E  E8 00000000 E		CALL WriteString

 00000063  E8 00000000 E		CALL WriteDec

 00000068  BA 0000004E R		MOV edx, OFFSET message3_2
 0000006D  E8 00000000 E		CALL WriteString

					;Taking in the values for the vector
 00000072  B9 00000000			MOV ecx, 0
 00000077  BB 00000000			MOV ebx, 0
 0000007C				do_while_Read:	
 0000007C  3B 1D 000002D7 R			CMP ebx,  vectorSize
 00000082  74 11				JE end_do_Read

 00000084  E8 00000000 E			CALL ReadDec
 00000089  89 81 00000147 R			MOV [vector + ecx], eax

 0000008F  83 C1 04				ADD ecx, TYPE vector
 00000092  43					INC ebx
 00000093  EB E7				JMP do_while_Read
 00000095				end_do_Read:

 00000095  E8 00000000 E		CALL Crlf
 0000009A  BA 00000064 R		MOV edx, OFFSET message4
 0000009F  E8 00000000 E		CALL WriteString
 000000A4  A1 000002D7 R		MOV eax, vectorSize
 000000A9  E8 00000000 E		CALL WriteDec
 000000AE  E8 00000000 E		CALL Crlf

 000000B3  BA 0000007B R		MOV edx, OFFSET message5
 000000B8  E8 00000000 E		CALL WriteString
 000000BD  E8 0000017D			CALL PrintVector
 000000C2  E8 00000000 E		CALL Crlf

 000000C7  E8 00000153			CALL IsStackEmpty
 000000CC  E8 00000000 E		CALL Crlf
 000000D1  E8 00000000 E		CALL Crlf
 000000D6  C6 05 0000046B R		MOV isStackEmptyBool, 1
	   01
					RET
 000000DD  5A		   *	    pop    edx
 000000DE  59		   *	    pop    ecx
 000000DF  5B		   *	    pop    ebx
 000000E0  58		   *	    pop    eax
 000000E1  5E		   *	    pop    esi
 000000E2  C3		   *	    ret    00000h
 000000E3			Option0 ENDP

 000000E3			Option1 PROC USES esi eax ebx ecx edx
 000000E3  56		   *	    push   esi
 000000E4  50		   *	    push   eax
 000000E5  53		   *	    push   ebx
 000000E6  51		   *	    push   ecx
 000000E7  52		   *	    push   edx
 000000E8  5E				POP ESI
 000000E9  80 3D 0000046B R		CMP isStackEmptyBool, 0
	   00
 000000F0  0F 84 00000081		JE error

 000000F6  E8 00000000 E		CALL Crlf
 000000FB  BA 000000A4 R		MOV edx, OFFSET message8
 00000100  E8 00000000 E		CALL WriteString
 00000105  E8 00000135			CALL PrintVector
 0000010A  BA 000000B9 R		MOV edx, OFFSET message10
 0000010F  E8 00000000 E		CALL WriteString
 00000114  E8 00000000 E		CALL Crlf

					;Logic
				;	CALL ArrayToStack
 00000119  E8 000001E5			CALL CopyInverseToStackToPrint
 0000011E  E8 00000178			CALL EmptyVector
					;End Logic

 00000123  BA 000000AF R		MOV edx, OFFSET message9
 00000128  E8 00000000 E		CALL WriteString
 0000012D  E8 0000013B			CALL PrintStackToPrint
 00000132  BA 000000CD R		MOV edx, OFFSET message11
 00000137  E8 00000000 E		CALL WriteString
 0000013C  E8 00000000 E		CALL Crlf

 00000141  BA 000000A4 R		MOV edx, OFFSET message8
 00000146  E8 00000000 E		CALL WriteString
 0000014B  E8 000000EF			CALL PrintVector
 00000150  BA 000000CD R		MOV edx, OFFSET message11
 00000155  E8 00000000 E		CALL WriteString
 0000015A  E8 00000000 E		CALL Crlf
 0000015F  C6 05 0000046B R		MOV isStackEmptyBool, 0
	   00
 00000166  E8 000000B4			CALL IsStackEmpty
 0000016B  E8 00000000 E		CALL Crlf
 00000170  E8 00000000 E		CALL Crlf
 00000175  EB 14			JMP end_if

 00000177				error:
 00000177  BA 0000012C R		MOV edx, OFFSET errorMessage1
 0000017C  E8 00000000 E		CALL WriteString
 00000181  E8 00000000 E		CALL Crlf
 00000186  E8 00000000 E		CALL Crlf

 0000018B				end_if:
 0000018B  56				PUSH ESI
					RET
 0000018C  5A		   *	    pop    edx
 0000018D  59		   *	    pop    ecx
 0000018E  5B		   *	    pop    ebx
 0000018F  58		   *	    pop    eax
 00000190  5E		   *	    pop    esi
 00000191  C3		   *	    ret    00000h
 00000192			Option1 ENDP

 00000192			Option2 PROC USES esi eax ebx ecx edx
 00000192  56		   *	    push   esi
 00000193  50		   *	    push   eax
 00000194  53		   *	    push   ebx
 00000195  51		   *	    push   ecx
 00000196  52		   *	    push   edx
 00000197  5E				POP ESI
 00000198  80 3D 0000046B R		CMP isStackEmptyBool, 1
	   01
 0000019F  74 63			JE error

 000001A1  E8 00000000 E		CALL Crlf
 000001A6  BA 000000AF R		MOV edx, OFFSET message9
 000001AB  E8 00000000 E		CALL WriteString
 000001B0  E8 000000B8			CALL PrintStackToPrint
 000001B5  BA 000000B9 R		MOV edx, OFFSET message10
 000001BA  E8 00000000 E		CALL WriteString
 000001BF  E8 00000000 E		CALL Crlf

					;Logic
 000001C4  E8 00000117			CALL StackToArray
 000001C9  E8 00000176			CALL EmptyStackToPrint
					;End Logic

 000001CE  BA 000000A4 R		MOV edx, OFFSET message8
 000001D3  E8 00000000 E		CALL WriteString
 000001D8  E8 00000062			CALL PrintVector
 000001DD  BA 000000CD R		MOV edx, OFFSET message11
 000001E2  E8 00000000 E		CALL WriteString
 000001E7  E8 00000000 E		CALL Crlf

 000001EC  C6 05 0000046B R		MOV isStackEmptyBool, 1
	   01
 000001F3  E8 00000027			CALL IsStackEmpty
 000001F8  E8 00000000 E		CALL Crlf
 000001FD  E8 00000000 E		CALL Crlf
 00000202  EB 14			JMP end_if
					
 00000204				error:
 00000204  BA 0000013B R		MOV edx, OFFSET errorMessage2
 00000209  E8 00000000 E		CALL WriteString
 0000020E  E8 00000000 E		CALL Crlf
 00000213  E8 00000000 E		CALL Crlf

 00000218				end_if:
 00000218  56				PUSH ESI
					RET
 00000219  5A		   *	    pop    edx
 0000021A  59		   *	    pop    ecx
 0000021B  5B		   *	    pop    ebx
 0000021C  58		   *	    pop    eax
 0000021D  5E		   *	    pop    esi
 0000021E  C3		   *	    ret    00000h
 0000021F			Option2 ENDP

 0000021F			IsStackEmpty PROC 
 0000021F  80 3D 0000046B R		CMP isStackEmptyBool, 1
	   01
 00000226  74 0C			JE is_empty
 00000228  BA 00000085 R		MOV edx, OFFSET message6
 0000022D  E8 00000000 E		CALL WriteString
 00000232  EB 0A			JMP end_if_empty
 00000234				is_empty:
 00000234  BA 00000095 R		MOV edx, OFFSET message7
 00000239  E8 00000000 E		CALL WriteString
 0000023E				end_if_empty:
 0000023E  C3				RET
 0000023F			IsStackEmpty ENDP

 0000023F			PrintVector PROC 
 0000023F  B9 00000000			MOV ecx, 0
 00000244  BB 00000000			MOV ebx, 0
 00000249				do_while_Print:	
 00000249  3B 1D 000002D7 R			CMP ebx,  vectorSize
 0000024F  74 1B				JE end_do_Print

 00000251  8B 81 00000147 R			MOV eax, [vector + ecx]
 00000257  E8 00000000 E			CALL WriteDec
 0000025C  B8 00000020				MOV eax, ' '
 00000261  E8 00000000 E			CALL WriteChar

 00000266  83 C1 04				ADD ecx, TYPE vector
 00000269  43					INC ebx
 0000026A  EB DD				JMP do_while_Print
 0000026C				end_do_Print:
 0000026C  C3				RET
 0000026D			PrintVector ENDP

 0000026D			PrintStackToPrint PROC 
 0000026D  B9 00000000			MOV ecx, 0
 00000272  BB 00000000			MOV ebx, 0
 00000277				do_while_Print:	
 00000277  3B 1D 000002D7 R			CMP ebx,  vectorSize
 0000027D  74 1B				JE end_do_Print

 0000027F  8B 81 000002DB R			MOV eax, [stackToPrint + ecx]
 00000285  E8 00000000 E			CALL WriteDec
 0000028A  B8 00000020				MOV eax, ' '
 0000028F  E8 00000000 E			CALL WriteChar

 00000294  83 C1 04				ADD ecx, TYPE vector
 00000297  43					INC ebx
 00000298  EB DD				JMP do_while_Print
 0000029A				end_do_Print:
 0000029A  C3				RET
 0000029B			PrintStackToPrint ENDP

 0000029B			EmptyVector PROC
 0000029B  B9 00000000			MOV ecx, 0
 000002A0  BB 00000000			MOV ebx, 0
 000002A5				do_while_Empty:	
 000002A5  3B 1D 000002D7 R			CMP ebx, vectorSize
 000002AB  74 10				JE end_do_Empty

 000002AD  C7 81 00000147 R			MOV [vector + ecx], 0
	   00000000

 000002B7  83 C1 04				ADD ecx, TYPE vector
 000002BA  43					INC ebx
 000002BB  EB E8				JMP do_while_Empty
 000002BD				end_do_Empty:
 000002BD  C3				RET
 000002BE			EmptyVector ENDP

 000002BE			ArrayToStack PROC
 000002BE  5B				POP ebx
 000002BF  B9 00000000			MOV ecx, 0
 000002C4  BA 00000000			MOV edx, 0

 000002C9				do_while_PUSH:	
 000002C9  3B 15 000002D7 R			CMP edx, vectorSize
 000002CF  74 0D				JE end_do_PUSH

 000002D1  8B 81 00000147 R			MOV eax, [vector + ecx]
 000002D7  50					PUSH eax

 000002D8  83 C1 04				ADD ecx, TYPE vector
 000002DB  42					INC edx
 000002DC  EB EB				JMP do_while_PUSH
 000002DE				end_do_PUSH:
 000002DE  53				PUSH ebx
 000002DF  C3				RET
 000002E0			ArrayToStack ENDP

 000002E0			StackToArray proc
 000002E0  5B				POP	ebx
 000002E1  A1 000002D7 R		MOV eax, vectorSize 
 000002E6  BA 00000004			MOV edx, TYPE vector
 000002EB  F7 E2			MUL edx
 000002ED  83 E8 04			SUB eax, TYPE vector
 000002F0				do_while_POP:	
 000002F0  59					POP ecx
 000002F1  89 88 00000147 R			MOV [vector + eax], ecx

 000002F7  83 F8 00				CMP eax, 0
 000002FA  74 05				JE end_do_POP

 000002FC  83 E8 04				SUB eax, TYPE vector
 000002FF  EB EF				JMP do_while_POP
 00000301				end_do_POP:
 00000301  53				PUSH ebx
 00000302  C3				RET
 00000303			StackToArray ENDP

 00000303			CopyInverseToStackToPrint proc
 00000303  5B				POP ebx

 00000304  B9 00000000			MOV ecx, 0
 00000309  BA 00000000			MOV edx, 0
 0000030E				do_while_PUSH:	
 0000030E  3B 15 000002D7 R			CMP edx, vectorSize
 00000314  74 0D				JE end_do_PUSH

 00000316  8B 81 00000147 R			MOV eax, [vector + ecx]
 0000031C  50					PUSH eax

 0000031D  83 C1 04				ADD ecx, TYPE vector
 00000320  42					INC edx
 00000321  EB EB				JMP do_while_PUSH
 00000323				end_do_PUSH:

 00000323  B9 00000000			MOV ecx, 0
 00000328  BA 00000000			MOV edx, 0
 0000032D				do_while_POP:	
 0000032D  3B 15 000002D7 R			CMP edx, vectorSize
 00000333  74 0D				JE end_do_POP
						
 00000335  58					POP eax
 00000336  89 81 000002DB R			MOV [stackToPrint + ecx], eax
						
 0000033C  83 C1 04				ADD ecx, TYPE vector
 0000033F  42					INC edx
 00000340  EB EB				JMP do_while_POP
 00000342				end_do_POP:
 00000342  53				PUSH ebx
 00000343  C3				RET
 00000344			CopyInverseToStackToPrint ENDP

 00000344			EmptyStackToPrint PROC
 00000344  B9 00000000			MOV ecx, 0
 00000349  BB 00000000			MOV ebx, 0
 0000034E				do_while_Empty:	
 0000034E  3B 1D 000002D7 R			CMP ebx, vectorSize
 00000354  74 10				JE end_do_Empty

 00000356  C7 81 000002DB R			MOV [stackToPrint + ecx], 0
	   00000000

 00000360  83 C1 04				ADD ecx, TYPE vector
 00000363  43					INC ebx
 00000364  EB E8				JMP do_while_Empty
 00000366				end_do_Empty:
 00000366  C3				RET
 00000367			EmptyStackToPrint ENDP

				end main
Microsoft (R) Macro Assembler Version 14.16.27026.1	    03/16/19 23:11:12
Ass3-1.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000472 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000367 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ArrayToStack . . . . . . . . . .	P Near	 000002BE _TEXT	Length= 00000022 Public STDCALL
  do_while_PUSH  . . . . . . . .	L Near	 000002C9 _TEXT	
  end_do_PUSH  . . . . . . . . .	L Near	 000002DE _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CopyInverseToStackToPrint  . . .	P Near	 00000303 _TEXT	Length= 00000041 Public STDCALL
  do_while_PUSH  . . . . . . . .	L Near	 0000030E _TEXT	
  end_do_PUSH  . . . . . . . . .	L Near	 00000323 _TEXT	
  do_while_POP . . . . . . . . .	L Near	 0000032D _TEXT	
  end_do_POP . . . . . . . . . .	L Near	 00000342 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EmptyStackToPrint  . . . . . . .	P Near	 00000344 _TEXT	Length= 00000023 Public STDCALL
  do_while_Empty . . . . . . . .	L Near	 0000034E _TEXT	
  end_do_Empty . . . . . . . . .	L Near	 00000366 _TEXT	
EmptyVector  . . . . . . . . . .	P Near	 0000029B _TEXT	Length= 00000023 Public STDCALL
  do_while_Empty . . . . . . . .	L Near	 000002A5 _TEXT	
  end_do_Empty . . . . . . . . .	L Near	 000002BD _TEXT	
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsStackEmpty . . . . . . . . . .	P Near	 0000021F _TEXT	Length= 00000020 Public STDCALL
  is_empty . . . . . . . . . . .	L Near	 00000234 _TEXT	
  end_if_empty . . . . . . . . .	L Near	 0000023E _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Option0  . . . . . . . . . . . .	P Near	 00000040 _TEXT	Length= 000000A3 Public STDCALL
  do_while_Read  . . . . . . . .	L Near	 0000007C _TEXT	
  end_do_Read  . . . . . . . . .	L Near	 00000095 _TEXT	
Option1  . . . . . . . . . . . .	P Near	 000000E3 _TEXT	Length= 000000AF Public STDCALL
  error  . . . . . . . . . . . .	L Near	 00000177 _TEXT	
  end_if . . . . . . . . . . . .	L Near	 0000018B _TEXT	
Option2  . . . . . . . . . . . .	P Near	 00000192 _TEXT	Length= 0000008D Public STDCALL
  error  . . . . . . . . . . . .	L Near	 00000204 _TEXT	
  end_if . . . . . . . . . . . .	L Near	 00000218 _TEXT	
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintStackToPrint  . . . . . . .	P Near	 0000026D _TEXT	Length= 0000002E Public STDCALL
  do_while_Print . . . . . . . .	L Near	 00000277 _TEXT	
  end_do_Print . . . . . . . . .	L Near	 0000029A _TEXT	
PrintVector  . . . . . . . . . .	P Near	 0000023F _TEXT	Length= 0000002E Public STDCALL
  do_while_Print . . . . . . . .	L Near	 00000249 _TEXT	
  end_do_Print . . . . . . . . .	L Near	 0000026C _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StackToArray . . . . . . . . . .	P Near	 000002E0 _TEXT	Length= 00000023 Public STDCALL
  do_while_POP . . . . . . . . .	L Near	 000002F0 _TEXT	
  end_do_POP . . . . . . . . . .	L Near	 00000301 _TEXT	
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000040 Public STDCALL
  do_while . . . . . . . . . . .	L Near	 00000005 _TEXT	
  next_check . . . . . . . . . .	L Near	 00000023 _TEXT	
  next_check1  . . . . . . . . .	L Near	 0000002D _TEXT	
  next_check2  . . . . . . . . .	L Near	 00000037 _TEXT	
  end_do . . . . . . . . . . . .	L Near	 00000039 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorMessage1  . . . . . . . . .	Byte	 0000012C _DATA	
errorMessage2  . . . . . . . . .	Byte	 0000013B _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
isStackEmptyBool . . . . . . . .	Byte	 0000046B _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
message10  . . . . . . . . . . .	Byte	 000000B9 _DATA	
message11  . . . . . . . . . . .	Byte	 000000CD _DATA	
message12  . . . . . . . . . . .	Byte	 000000E0 _DATA	
message13  . . . . . . . . . . .	Byte	 0000010D _DATA	
message1 . . . . . . . . . . . .	Byte	 00000000 _DATA	
message2 . . . . . . . . . . . .	Byte	 0000001F _DATA	
message3_1 . . . . . . . . . . .	Byte	 00000040 _DATA	
message3_2 . . . . . . . . . . .	Byte	 0000004E _DATA	
message4 . . . . . . . . . . . .	Byte	 00000064 _DATA	
message5 . . . . . . . . . . . .	Byte	 0000007B _DATA	
message6 . . . . . . . . . . . .	Byte	 00000085 _DATA	
message7 . . . . . . . . . . . .	Byte	 00000095 _DATA	
message8 . . . . . . . . . . . .	Byte	 000000A4 _DATA	
message9 . . . . . . . . . . . .	Byte	 000000AF _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
stackToPrint . . . . . . . . . .	DWord	 000002DB _DATA	
trace  . . . . . . . . . . . . .	Byte	 0000046C _DATA	
vectorSize . . . . . . . . . . .	DWord	 000002D7 _DATA	
vector . . . . . . . . . . . . .	DWord	 00000147 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
